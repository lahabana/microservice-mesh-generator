openapi: "3.0.3"
info:
  version: 1.0.0
  title: Microservice Mesh Generator
  license:
    name: MIT
  description: A simple API to generate meshes of microservices
  contact:
    email: charly.molter@konghq.com
servers:
  - url: http://localhost:8080
tags:
  - name: base
paths:
  /ready:
    get:
      tags: ["base"]
      summary: healthcheck
      description: healthcheck
      operationId: ready
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /health:
    get:
      tags: [ "base" ]
      summary: healthcheck
      description: healthcheck
      operationId: health
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /api:
    get:
      tags: ["base"]
      summary: home
      description: home
      operationId: home
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeResponse'
  /api/random.{format}:
    get:
      tags: ["base"]
      summary: "generate a random mesh"
      description: "generate a random mesh"
      operationId: GenerateRandom
      parameters:
        - in: path
          name: format
          required: true
          schema:
            $ref: '#/components/schemas/OutputFormat'
        - in: query
          name: k8sApp
          schema:
            $ref: '#/components/schemas/K8sAppType'
          description: The app to use
        - in: query
          name: k8sNamespace
          schema:
            type: string
          description: the namespace to use
        - in: query
          name: seed
          schema:
            type: integer
          description: the seed to use for deterministic randomness
        - in: query
          name: k8s
          schema:
            type: boolean
          description: whether or not to return kubernetes manifest
        - in: query
          name: numServices
          schema:
            default: 5
            type: integer
          description: integer of services to run
        - in: query
          name: minReplicas
          schema:
            default: 2
            type: integer
          description: minimum number of replicas per service
        - in: query
          name: maxReplicas
          schema:
            default: 2
            type: integer
          description: maximum number of replicas per service
        - in: query
          name: percentEdge
          schema:
            type: integer
            default: 50
            minimum: 0
            maximum: 100
          description: maximum number of replicas per service
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/MeshResponse'
            text/vnd.mermaid:
              schema:
                type: string
            text/vnd.graphviz:
              schema:
                type: string

        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/define.{format}:
    post:
      parameters:
      - in: path
        name: format
        required: true
        schema:
          $ref: '#/components/schemas/OutputFormat'
      - in: query
        name: k8sApp
        schema:
          $ref: '#/components/schemas/K8sAppType'
        description: The app to use
      - in: query
        name: k8sNamespace
        schema:
          type: string
        description: the namespace to use
      - in: query
        name: k8s
        schema:
          type: boolean
        description: whether or not to return kubernetes manifest
      - in: query
        name: numServices
        schema:
          default: 5
          type: integer
        description: integer of services to run
      - in: query
        name: minReplicas
        schema:
          default: 2
          type: integer
        description: minimum number of replicas per service
      - in: query
        name: maxReplicas
        schema:
          default: 2
          type: integer
        description: maximum number of replicas per service
      - in: query
        name: percentEdge
        schema:
          type: integer
          default: 50
          minimum: 0
          maximum: 100
        description: maximum number of replicas per service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeshDefinition'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/MeshResponse'
            text/vnd.mermaid:
              schema:
                type: string
            text/vnd.graphviz:
              schema:
                type: string

        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      type: object
      required: [status, details]
      properties:
        status:
          type: integer
        details:
          type: string
        invalid_parameters:
          type: array
          items:
            $ref: '#/components/schemas/InvalidParameter'
    InvalidParameter:
      type: object
      required: [field, reason]
      properties:
        field:
          type: string
        reason:
          type: string
    Health:
      type: object
      required: [status]
      properties:
        status:
          type: integer
    HomeResponse:
      type: object
      required: [ version, hostname, commit, target ]
      properties:
        version:
          type: string
        hostname:
          type: string
        commit:
          type: string
        target:
          type: string
    MeshResponse:
      type: object
      properties: {}
    MeshDefinition:
      type: object
      required: [services]
      properties:
        services:
          type: array
          minItems: 1
          maxItems: 5000
          items:
            $ref: '#/components/schemas/ServiceEntry'
    ServiceEntry:
      type: object
      required: [edges, replicas]
      properties:
        edges:
          type: array
          maxItems: 50
          items:
            type: integer
        replicas:
          type: integer
    OutputFormat:
      type: string
      enum: ["", "mmd", "gv", "yaml", "json"]
    K8sAppType:
      type: string
      enum: ["api-play", "fake-service"]
